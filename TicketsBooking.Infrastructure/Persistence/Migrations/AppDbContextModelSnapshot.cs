// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketsBooking.Infrastructure.Persistence;

namespace TicketsBooking.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<string>("EventsEventID")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TagsKeyword")
                        .HasColumnType("varchar(50)");

                    b.HasKey("EventsEventID", "TagsKeyword");

                    b.HasIndex("TagsKeyword");

                    b.ToTable("EventTag");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Admin", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Email");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ValidationToken")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Email");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AllTickets")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BoughtTickets")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ReservationDueDate")
                        .HasColumnType("datetime");

                    b.Property<float>("SingleTicketPrice")
                        .HasColumnType("float");

                    b.Property<string>("SubCategory")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime");

                    b.HasKey("EventID");

                    b.HasIndex("ProviderName");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.EventProvider", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Bio")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Name");

                    b.HasIndex("WebsiteLink")
                        .IsUnique();

                    b.ToTable("EventProviders");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Participant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("EventID")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Purchase", b =>
                {
                    b.Property<string>("PurchaseID")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("EventID")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<float>("SingleTicketCost")
                        .HasColumnType("float");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("int");

                    b.HasKey("PurchaseID");

                    b.HasIndex("CustomerEmail");

                    b.HasIndex("EventID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EventProviderName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Link");

                    b.HasIndex("EventProviderName");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Tag", b =>
                {
                    b.Property<string>("Keyword")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Keyword");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("TicketsBooking.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketsBooking.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsKeyword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Event", b =>
                {
                    b.HasOne("TicketsBooking.Domain.Entities.EventProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Participant", b =>
                {
                    b.HasOne("TicketsBooking.Domain.Entities.Event", null)
                        .WithMany("Participants")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("TicketsBooking.Domain.Entities.Customer", null)
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketsBooking.Domain.Entities.Event", null)
                        .WithMany("Purchases")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.SocialMedia", b =>
                {
                    b.HasOne("TicketsBooking.Domain.Entities.EventProvider", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("EventProviderName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.Event", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("TicketsBooking.Domain.Entities.EventProvider", b =>
                {
                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
